@page "/"
@using NorthWindv2API
@using Models.NorthWindv2API
@using System.Reactive.Subjects
@using System.Reactive.Linq
@inject INorthWindv2APIService NorthWindv2APIService
@implements IDisposable;

<div class="row-layout child-view-container">
    <div class="column-layout group">
        <div class="row-layout group">
            <IgbGrid Data="@NorthWindv2ApiOrderDto" PrimaryKey="OrderId" DisplayDensity="DisplayDensity.Cosy" RowSelection="GridSelectionMode.Single" AllowFiltering="true" FilterMode="FilterMode.ExcelStyleFilter" AutoGenerate="false" RowSelectionChanging="GridRowSelectionChanging" class="ig-typography grid" child_view-scope>
                <IgbColumn Field="OrderId" DataType="GridColumnDataType.Number" Header="orderId" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="CustomerId" DataType="GridColumnDataType.String" Header="customerId" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="CustomerId" DataType="GridColumnDataType.String" Header="customerId" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="EmployeeId" DataType="GridColumnDataType.Number" Header="employeeId" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="EmployeeId" DataType="GridColumnDataType.Number" Header="employeeId" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipperId" DataType="GridColumnDataType.Number" Header="shipperId" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipperId" DataType="GridColumnDataType.Number" Header="shipperId" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="OrderDate" DataType="GridColumnDataType.String" Header="orderDate" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="OrderDate" DataType="GridColumnDataType.String" Header="orderDate" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="RequiredDate" DataType="GridColumnDataType.String" Header="requiredDate" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="RequiredDate" DataType="GridColumnDataType.String" Header="requiredDate" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipVia" DataType="GridColumnDataType.Number" Header="shipVia" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipVia" DataType="GridColumnDataType.Number" Header="shipVia" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="Freight" DataType="GridColumnDataType.Number" Header="freight" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="Freight" DataType="GridColumnDataType.Number" Header="freight" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipName" DataType="GridColumnDataType.String" Header="shipName" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipName" DataType="GridColumnDataType.String" Header="shipName" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.Street" DataType="GridColumnDataType.String" Header="shipAddress street" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.Street" DataType="GridColumnDataType.String" Header="shipAddress street" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.City" DataType="GridColumnDataType.String" Header="shipAddress city" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.City" DataType="GridColumnDataType.String" Header="shipAddress city" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.Region" DataType="GridColumnDataType.String" Header="shipAddress region" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.Region" DataType="GridColumnDataType.String" Header="shipAddress region" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.PostalCode" DataType="GridColumnDataType.String" Header="shipAddress postalCode" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.PostalCode" DataType="GridColumnDataType.String" Header="shipAddress postalCode" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.Country" DataType="GridColumnDataType.String" Header="shipAddress country" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.Country" DataType="GridColumnDataType.String" Header="shipAddress country" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.Phone" DataType="GridColumnDataType.String" Header="shipAddress phone" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.Phone" DataType="GridColumnDataType.String" Header="shipAddress phone" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="OrderId" DataType="GridColumnDataType.Number" Header="orderId" Sortable="true" Selectable="false"></IgbColumn>
            </IgbGrid>
        </div>
        <div class="column-layout group">
            <div class="row-layout group_1">
                @foreach (var item in this.OrderDetails)
                {
                    <IgbCard Outlined="true" class="card" child_view-scope>
                        <IgbCardHeader>
                            <h3 slot="title">
                                @item.ProductId
                            </h3>
                            <h5 slot="subtitle">
                                @item.UnitPrice
                            </h5>
                        </IgbCardHeader>
                        <IgbCardActions class="actions-content" child_view-scope>
                            <IgbButton Variant="ButtonVariant.Flat" slot="start" Size="SizableComponentSize.Large" @onclick="() => ButtonClick(item)" class="button" child_view-scope>
                                Button
                                <IgbRipple></IgbRipple>
                            </IgbButton>
                            <IgbIconButton slot="end" Variant="IconButtonVariant.Flat" @onclick="() => IconButtonClick(item)">
                                <span class="material-icons">
                                    favorite
                                </span>
                                <IgbRipple></IgbRipple>
                            </IgbIconButton>
                            <IgbIconButton slot="end" Variant="IconButtonVariant.Flat">
                                <span class="material-icons">
                                    bookmark
                                </span>
                                <IgbRipple></IgbRipple>
                            </IgbIconButton>
                            <IgbIconButton slot="end" Variant="IconButtonVariant.Flat">
                                <span class="material-icons">
                                    share
                                </span>
                                <IgbRipple></IgbRipple>
                            </IgbIconButton>
                        </IgbCardActions>
                    </IgbCard>
                }
            </div>
            <div class="row-layout group_1">
                <p class="typography__body-1 text">
                    @* ToString should be removed *@
                    @_quantity
                </p>
            </div>
            <div class="row-layout group_1">
                <p class="typography__body-1 text">
                    @* ToString should be removed *@
                    @_discount
                </p>
            </div>
        </div>
    </div>
</div>

@code {
    // Those variables should be nullable, private and be fields instead of properties 
    private double? _quantity;
    private double? _discount;
    
    private Subject<object> destroy = new();
    
    private List<OrderDto> _northWindv2APIOrderDto = new();

    private List<OrderDto> NorthWindv2ApiOrderDto
    {
        get => _northWindv2APIOrderDto;
        set
        {
            _northWindv2APIOrderDto = value;
            // orderDetails depends on selectedCustomer
            OrderDetails = new();
        }
    }

    private List<OrderDetailDto> _orderDetails = new();

    private List<OrderDetailDto> OrderDetails
    {
        get => _orderDetails;
        set
        {
            _orderDetails = value;
            // quantity and discount depends on orderDetails
            _quantity = null;
            _discount = null;
        }
    }

    public void GridRowSelectionChanging(IgbRowSelectionEventArgs e)
    {
        NorthWindv2APIService.SelectedOrder.OnNext((OrderDto)e.Detail.NewSelection.FirstOrDefault());
    }

    // This method should be private
    private void ButtonClick(OrderDetailDto item)
    {
        _quantity = (double)item.Quantity;
    }

    // This method should be private
    private void IconButtonClick(OrderDetailDto item)
    {
        _discount = (double)item.Discount;
    }

    protected override async Task OnInitializedAsync()
    {
        NorthWindv2APIService.SelectedOrder.TakeUntil(this.destroy).Subscribe(async s =>
        {
            OrderDetails = await NorthWindv2APIService.GetOrderDetailDtoList($"{NorthWindv2APIService.SelectedOrder.Value?.OrderId}");
            await InvokeAsync(StateHasChanged);
        });
        NorthWindv2APIService.SelectedCustomer.TakeUntil(this.destroy).Subscribe(async s =>
        {
            NorthWindv2ApiOrderDto = await NorthWindv2APIService.GetOrderDtoList($"{NorthWindv2APIService.SelectedCustomer.Value?.CustomerId}");
            await InvokeAsync(StateHasChanged);
        });

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        this.destroy.OnNext(null);
        this.destroy.Dispose();
    }

}